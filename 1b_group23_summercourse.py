# -*- coding: utf-8 -*-
"""1B-Group23-SummerCourse.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18xRzuBD44LO3apQY_saMfJ1HiNoDy_Kl
"""

def main():
    total_miles = 0.0
    total_gallons = 0.0

    while True:
        gallons = float(input("Enter gallons used (-1 to quit): "))
        if gallons == -1:
            break
        miles = float(input("Enter miles driven: "))

        mpg = miles / gallons
        print(f"Miles per gallon for this tankful: {mpg:.2f}")

        total_miles += miles
        total_gallons += gallons

    if total_gallons != 0:
        combined_mpg = total_miles / total_gallons
        print(f"Combined miles per gallon for all tankfuls: {combined_mpg:.2f}")
    else:
        print("No data to calculate.")

if __name__ == "__main__":
    main()

import random

def roll_dice():
    die1 = random.randint(1, 6)
    die2 = random.randint(1, 6)
    return die1, die2

def main():
    die1, die2 = roll_dice()
    sum_dice = die1 + die2
    print(f'You rolled {die1} + {die2} = {sum_dice}')

    if sum_dice in (7, 11):
        print('You win!')
    elif sum_dice in (2, 3, 12):
        print('Craps! You lose.')
    else:
        point = sum_dice
        print(f'Your point is {point}. Keep rolling to make your point.')

        while True:
            die1, die2 = roll_dice()
            sum_dice = die1 + die2
            print(f'You rolled {die1} + {die2} = {sum_dice}')

            if sum_dice == point:
                print('You made your point! You win!')
                break
            elif sum_dice == 7:
                print('You rolled a 7. You lose.')
                break

if __name__ == "__main__":
    main()

import statistics

# Data on the number of new patients infected every day for the first 20 days
infection_numbers = [174, 335, 278, 214, 422, 513, 737, 672, 489, 412, 1301, 1105, 1123, 1376, 1502, 894, 665, 1704, 1656, 1342]

# Calculates the requested statistics
minimum = min(infection_numbers)
maximum = max(infection_numbers)
range_infections = maximum - minimum
mean = statistics.mean(infection_numbers)
median = statistics.median(infection_numbers)
variance = statistics.variance(infection_numbers)
std_deviation = statistics.stdev(infection_numbers)

# Displays statistical results
print(f'Minimum number of infections: {minimum}')
print(f'Maximum number of infections: {maximum}')
print(f'Range of infections: {range_infections}')
print(f'Mean number of infections: {mean:.2f}')
print(f'Median number of infections: {median}')
print(f'Variance of infections: {variance:.2f}')
print(f'Standard deviation of infections: {std_deviation:.2f}')